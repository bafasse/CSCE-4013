import java.util.Scanner;
import java.io.*;
import java.math.BigInteger;
import java.lang.Object;
import java.security.*;
import java.util.Base64;
import javax.crypto.Cipher;
import static java.nio.charset.StandardCharsets.UTF_8;
import java.nio.file.Paths;
import java.nio.file.Files;
import java.lang.IllegalArgumentException;



public class hw6 {

    public static String getSHA(String input) {

        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] messageDigest = md.digest(input.getBytes());
            BigInteger no = new BigInteger(1, messageDigest);
            String hashTxt = no.toString(16);

            while(hashTxt.length() < 32) {
                hashTxt = "0" + hashTxt;
            }

            return hashTxt;
            
        } catch (Exception e) {
            System.out.println("Exception thrown"
                               + " for incorrect algorithm: " + e); 
  
            return null; 
        }
    }

    public static KeyPair generateKeyPair() throws Exception {
        KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
        generator.initialize(2048, new SecureRandom());
        KeyPair pair = generator.generateKeyPair();
    
        return pair;
    }

    public static String sign(String plainText, PrivateKey privateKey) throws Exception {
        Signature privateSignature = Signature.getInstance("SHA256withRSA");
        privateSignature.initSign(privateKey);
        privateSignature.update(plainText.getBytes(UTF_8));
    
        byte[] signature = privateSignature.sign();
    
        return Base64.getEncoder().encodeToString(signature);
    }

    public static boolean verify(String plainText, String signature, PublicKey publicKey) throws Exception {
        Signature publicSignature = Signature.getInstance("SHA256withRSA");
        publicSignature.initVerify(publicKey);
        publicSignature.update(plainText.getBytes(UTF_8));
    
        byte[] signatureBytes = Base64.getDecoder().decode(signature);
    
        return publicSignature.verify(signatureBytes);
    }

    public static void main(String[] args) throws Exception, IOException, NoSuchAlgorithmException, FileNotFoundException, IllegalArgumentException, 
                                                  SignatureException, NumberFormatException, NoSuchProviderException {

        String arr[] = new String[8];
        String hash[] = new String[8];
        String merkle[] = new String[8];

        System.out.println("HashCode Generated by SHA-256 for:"); 
  
        for (int i = 0; i < arr.length; ++i) {

            System.out.println("Enter a 4 letter word for message " + (i + 1) + ": ");
            Scanner scanner = new Scanner(System.in);
            String msg = scanner.nextLine();

            while(msg.length() > 4) {
                System.out.println("------------------------------------------");
                System.out.println("The String must be of length 4. Try Again.");
                System.out.println("Enter a 4 letter word for message " + (i + 1) + ": ");
                System.out.println("------------------------------------------");
                scanner = new Scanner(System.in);
                msg = scanner.nextLine();
                System.out.println(" ");
            }

            arr[i] = msg;
            hash[i] = getSHA(arr[i]);
            // System.out.println(i + ") " + arr[i]);
            // System.out.println(hash[i]);
        }

        // 2nd level
        merkle[0] = getSHA(hash[0] + hash[1]); // H12
        merkle[1] = getSHA(hash[2] + hash[3]); // H34
        merkle[2] = getSHA(hash[4] + hash[5]); // H56
        merkle[3] = getSHA(hash[6] + hash[7]); // H78

        //3rd Level
        merkle[4] = getSHA(merkle[0] + merkle[1]); // H14
        merkle[5] = getSHA(merkle[2] + merkle[3]); // H58

        // Root
        merkle[6] = getSHA(merkle[4] + merkle[5]);
        System.out.println("The tree root is: " + merkle[6]); // H18

        
        KeyPair pair = generateKeyPair();
        String signature = sign(merkle[6], pair.getPrivate());

        // Digital Signature
        merkle[7] = signature;

        // Storing Extended Signatures
        // EX) Extended Sig of M1 = (h2, h34, h58), Sig(root)
        // Content in parenthesis is its path to root
        // Some nodes are left out, like h12, since that can be computed
        String extSigArr[] = new String[8];
        extSigArr[0] = arr[0] + hash[1] + merkle[1] + merkle[5] + merkle[7];
        extSigArr[1] = arr[1] + hash[0] + merkle[1] + merkle[5] + merkle[7];
        extSigArr[2] = arr[2] + hash[3] + merkle[0] + merkle[5] + merkle[7];
        extSigArr[3] = arr[3] + hash[2] + merkle[0] + merkle[5] + merkle[7];
        extSigArr[4] = arr[4] + hash[5] + merkle[3] + merkle[4] + merkle[7];
        extSigArr[5] = arr[5] + hash[4] + merkle[3] + merkle[4] + merkle[7];
        extSigArr[6] = arr[6] + hash[7] + merkle[2] + merkle[4] + merkle[7];
        extSigArr[7] = arr[7] + hash[6] + merkle[2] + merkle[4] + merkle[7];

        System.out.println("Please choose one of the eight message (1-8): ");
        Scanner scan = new Scanner(System.in);
        int chooseMsg = scan.nextInt();

        while (chooseMsg < 0 || chooseMsg > 8) {
            System.out.println("Please make sure your choice is between 1 and 8");
            scan = new Scanner(System.in);
            chooseMsg = scan.nextInt();
        }

        String extSig = "Hello World";
        String extSigMsg = "Hello World";
        if (chooseMsg == 1) {
            extSig = extSigArr[0];
            extSigMsg = arr[0];
        }

        else if (chooseMsg == 2) {
            extSig = extSigArr[1];
            extSigMsg = arr[1];
        }

        else if (chooseMsg == 3) {
            extSig = extSigArr[2];
            extSigMsg = arr[2];
        }

        else if (chooseMsg == 4) {
            extSig = extSigArr[3];
            extSigMsg = arr[3];
        }

        else if (chooseMsg == 5) {
            extSig = extSigArr[4];
            extSigMsg = arr[4];
        }

        else if (chooseMsg == 6) {
            extSig = extSigArr[5];
            extSigMsg = arr[5];
        }

        else if (chooseMsg == 7) {
            extSig = extSigArr[6];
            extSigMsg = arr[6];
        }

        else if (chooseMsg == 8) {
            extSig = extSigArr[7];
            extSigMsg = arr[7];
        }
        System.out.println("The extended sig is: " + extSig);

        // Write to File
        File file = new File("sig.txt");
        FileOutputStream out = new FileOutputStream(file);
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(out));

        bw.write(extSig);
        bw.newLine();
        bw.write("The message used is: " + extSigMsg);
        bw.close();

        // Stop gap that allows to change of file to test validation
        System.out.println("Would you like to verify if this is correct? (Y/N): ");
        Scanner sc = new Scanner(System.in);
        String validate = sc.nextLine();

        if (validate.equals("Y") || validate.equals("y")) {
            // Read from file
            String data = "";
            try { 
                BufferedReader br = new BufferedReader(new FileReader(file));
                data = br.readLine();
            } catch (IOException e) { 
                e.printStackTrace(); 
            } 

            if (data.equals(extSig)) {
                System.out.println("Signature Correct: True");
            }

            else {
                System.out.println("Signature Correct: False");
                System.out.println("The Signature you have does not match the one we have on file");
            }
        }

        else if (validate.equals("N") || validate.equals("n")) {
            System.out.println("Thank You for use");
        }

        else {
            System.out.println("Failure to check validation");
            System.out.println("Make sure your input is either Y or N");
        }
    }
}