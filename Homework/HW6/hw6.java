import java.util.Scanner;
import java.io.*;
import java.math.BigInteger;
import java.lang.Object;
import java.security.*;
import java.util.Base64;
import javax.crypto.Cipher;
import static java.nio.charset.StandardCharsets.UTF_8;
import java.nio.file.Paths;
import java.nio.file.Files;
import java.lang.IllegalArgumentException;



public class hw6 {

    public static String getSHA(String input) {

        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] messageDigest = md.digest(input.getBytes());
            BigInteger no = new BigInteger(1, messageDigest);
            String hashTxt = no.toString(16);

            while(hashTxt.length() < 32) {
                hashTxt = "0" + hashTxt;
            }

            return hashTxt;
            
        } catch (Exception e) {
            System.out.println("Exception thrown"
                               + " for incorrect algorithm: " + e); 
  
            return null; 
        }
    }

    public static KeyPair generateKeyPair() throws Exception {
        KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
        generator.initialize(2048, new SecureRandom());
        KeyPair pair = generator.generateKeyPair();
    
        return pair;
    }

    public static String sign(String plainText, PrivateKey privateKey) throws Exception {
        Signature privateSignature = Signature.getInstance("SHA256withRSA");
        privateSignature.initSign(privateKey);
        privateSignature.update(plainText.getBytes(UTF_8));
    
        byte[] signature = privateSignature.sign();
    
        return Base64.getEncoder().encodeToString(signature);
    }

    public static boolean verify(String plainText, String signature, PublicKey publicKey) throws Exception {
        Signature publicSignature = Signature.getInstance("SHA256withRSA");
        publicSignature.initVerify(publicKey);
        publicSignature.update(plainText.getBytes(UTF_8));
    
        byte[] signatureBytes = Base64.getDecoder().decode(signature);
    
        return publicSignature.verify(signatureBytes);
    }

    public static void main(String[] args) throws Exception, IOException, NoSuchAlgorithmException, FileNotFoundException, IllegalArgumentException, SignatureException {

        String arr[] = new String[8];
        String hash[] = new String[8];
        String merkle[] = new String[8];
        // System.out.println(arr.length);
        // System.out.println(hash.length);
        // System.out.println(merkle.length);

        System.out.println("HashCode Generated by SHA-256 for:"); 
  
        for (int i = 0; i < arr.length; ++i) {

            System.out.println("Enter a 4 letter word: ");
            Scanner scanner = new Scanner(System.in);
            String msg = scanner.nextLine();

            while(msg.length() > 4) {
                System.out.println("------------------------------------------");
                System.out.println("The String must be of length 4. Try Again.");
                System.out.println("Enter a 4 letter word: ");
                System.out.println("------------------------------------------");
                scanner = new Scanner(System.in);
                msg = scanner.nextLine();
                System.out.println(" ");
            }

            arr[i] = msg;
            hash[i] = getSHA(arr[i]);
            // System.out.println(i + ") " + arr[i]);
            // System.out.println(hash[i]);
        }

        // 2nd level
        merkle[0] = getSHA(hash[0] + hash[1]);
        merkle[1] = getSHA(hash[2] + hash[3]);
        merkle[2] = getSHA(hash[4] + hash[5]);
        merkle[3] = getSHA(hash[6] + hash[7]);

        //3rd Level
        merkle[4] = getSHA(merkle[0] + merkle[1]);
        merkle[5] = getSHA(merkle[2] + merkle[3]);

        // Root
        merkle[6] = getSHA(merkle[4] + merkle[5]);


        KeyPair pair = generateKeyPair();
        String signature = sign(merkle[6], pair.getPrivate());

        // Digital Signature
        merkle[7] = signature;
        // System.out.println(merkle[7]);

        // Write to File
        FileOutputStream out = new FileOutputStream("sig.txt");
        byte[] strToBytes = signature.getBytes();
        out.write(strToBytes);
        out.close();


        // Stop gap that allows to change of file to test validation
        System.out.println("Would you like to verify if this is correct? (Y/N): ");
        Scanner sc = new Scanner(System.in);
        String validate = sc.nextLine();

        if (validate.equals("Y") || validate.equals("y")) {
            // Read from file
            String data = "";
            try { 
                    data = new String(Files.readAllBytes(Paths.get("sig.txt"))); 
            } catch (IOException e) { 
                e.printStackTrace(); 
            } 
            boolean isCorrect = verify(merkle[6], data, pair.getPublic());
            // boolean isCorrect = true;
            System.out.println("Signature Correct: " + isCorrect);
            // System.out.println("if");
        }

        else if (validate.equals("N") || validate.equals("n")) {
            System.out.println("Thank You for use");
        }

        else {
            System.out.println("Failure to check validation");
            System.out.println("Make sure your input is either Y or N");
        }
    }
}